//
//  PoorBigProblem.cpp
//  AlgoTest
//
//  Created by Tony Chen on 25/11/2016.
//  Copyright © 2016 Tony Chen. All rights reserved.
//

#include <gtest/gtest.h>
#include <gmock/gmock.h>

using namespace std;

// 问题：现有1000个水桶，有一个水桶放着是毒药，其它都是一般的水，现有一些猪，猪喝了毒药后15分钟死亡，喝了水没事，现需要在1小时内找出毒药，问最小需要的猪数量
// 算法：这是一个数学问题。首先通过题意，可知我们可以最多做4次实验 （1小时／15分钟 ＝ 4）。 然后可以从最简单的一头猪的角度研推：
//      假定现在有一头猪，4轮试验，最多可以判定几桶水？显眼，只有一头猪，只能一桶桶试，4次实验只能覆盖5桶水；
//      然后有2头猪，如果是一轮试验，则可以根据2进制的01，00，10，11可以覆盖4桶水，具体如下： a， b（猪1喝），c（猪2喝），d（猪1，2喝）；这样，判定为：
//           猪1，2均活－a；猪1亡－b；猪2亡－c；猪1，2均亡－d。
//      然后如3头猪，如果是一轮试验，则根据2进制000，001，010，011，100，101，110，111可覆盖8桶水，具体为：a，b（猪1），c（猪2），d（猪3），e（猪1，2），f（猪1，3），g（猪2，3），h（猪1，2，3）。判定为：
//           猪1，2，3均活a；猪1亡－b；猪2亡－c；猪3亡－d；猪1，2均亡－e；猪1，3均亡－f；猪2，3均亡－f；猪1，2，3均亡－h
//      然后2头猪，2轮试验，则头一轮试验可以分出4组桶，然后根据每个组剩下猪的数量，可以定出每组桶的最大数量，如前面的a，b，c，d四组桶，选a时，2猪均活，所以a下又可以有4个桶，b，c下只有一头猪，所以只能2桶，d下没有猪了，只能是1桶，所以（4＋2+2+1）＝9，2猪2轮为9桶。
//     在3猪，2轮的情况下，桶数分布为a（9），b，c，d（4），e，f，g（2），h（1）；共27桶
//
// 逐渐可知：桶数 ＝ （1+轮次数) ^ 猪数量
// 这其实也可从每个猪代表一个维度的扫描来认知，而轮数就是扫描次数。每个猪代表的维度与其它猪是没有关系的。
//
// 最终结果：（1+4）^ 5 > 1000, 所以猪数量为5.


